# When looking for existing CRs,
# 'branch submit' will disregard CRs that don't match HEAD.

as 'Test <test@example.com>'
at '2024-11-06T05:31:32Z'

# setup
cd repo
git init
git commit --allow-empty -m 'Initial commit'

# set up a fake GitHub remote
shamhub init
shamhub register alice
shamhub new origin alice/example.git
git push origin main

env SHAMHUB_USERNAME=alice
gs auth login

# create a CR with the name "feature"
git add feat1.txt
gs bc -m feat1
git push -u origin feat1:feature
gs bs --fill

# go back to trunk, forget all state,
# create a new branch with a different file.
gs trunk
gs repo init --reset --trunk=main --remote=origin
git add feat2.txt
gs bc feature -m 'Add feature 2'

# Since we don't have an upstream branch associated,
# gs will want to use 'feature' as the branch name.
# This will fail, because 'feature' is already taken
# by the CR we created earlier.
gs branch submit --fill
stderr 'Ignoring CR #\d+ with the same branch name'
stderr 'remote HEAD .+? does not match local HEAD'
stderr 'If this is incorrect, cancel this operation.*git pull.*and retry'
stderr 'Branch name already in use in remote ''origin'''
stderr 'Using upstream name ''feature-2'''

git rev-parse --abbrev-ref feature@{upstream}
stdout 'origin/feature-2'

-- repo/feat1.txt --
feature 1

-- repo/feat2.txt --
feature 2
