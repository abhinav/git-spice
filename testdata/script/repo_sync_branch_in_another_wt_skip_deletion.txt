# 'repo sync' run from trunk in the main repository,
# when a feature branch that should be deleted is checked out in another worktree.
# The branch should be skipped for deletion with appropriate warning.

as 'Test <test@example.com>'
at '2025-06-20T21:28:29Z'

# setup
mkdir repo
cd repo
git init
git commit --allow-empty -m 'Initial commit'
gs repo init

# set up a remote
shamhub init
shamhub new origin alice/example.git
git push origin main

# set up user
shamhub register alice
env SHAMHUB_USERNAME=alice
gs auth login

# start working on features
git add feat1.txt
gs bc -m 'feature 1' feat1
gs bs --fill

git add feat2.txt
gs bc -m 'feature 2' feat2
gs bs --fill

# check out feat1 in another worktree
git worktree add ../wt1 feat1

# update the remote out of band
cd ..
shamhub clone alice/example.git fork
cd fork
cp $WORK/extra/feat3.txt feat3.txt
git add feat3.txt
git commit -m 'Add feature 3'
git push origin main

# merge feat1 server-side (this is the branch in another worktree)
shamhub merge alice/example 1
# merge feat2 server-side (this should be deleted normally)
shamhub merge alice/example 2

# sync from trunk - feat1 should be skipped, feat2 should be deleted
cd ../repo
git checkout main
gs repo sync
stderr 'INF main: pulled 3 new commit\(s\)'
stderr 'INF feat1: #1 was merged'
stderr 'INF feat2: #2 was merged'
stderr 'WRN feat1: checked out in another worktree \(.+/wt1\), skipping deletion\.'
stderr 'WRN Run ''gs branch delete'' or run ''gs repo sync'' again from that worktree to delete it\.'
stderr 'INF feat2: deleted \(was [a-f0-9]+\)'

-- repo/feat1.txt --
feature 1

-- repo/feat2.txt --
feature 2

-- extra/feat3.txt --
feature 3
