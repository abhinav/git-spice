# Test 'repo restack' with dirty worktree changes.
# https://github.com/abhinav/git-spice/issues/804

as 'Test User <test@example.com>'
at 2025-06-20T21:28:29Z

cd repo
git init
git commit -m 'Initial commit' --allow-empty

gs repo init
git add feat1.txt
gs branch create feat1 -m 'feat1 commit'
git add feat2.txt  
gs branch create feat2 -m 'feat2 commit'

# Create a new commit on trunk to make branches need restacking
gs branch checkout main
git commit --allow-empty -m 'New trunk commit'

# Switch to feat2 and make dirty changes
gs branch checkout feat2
cp $WORK/extra/dirty.txt feat2.txt

# Verify worktree is dirty
git status --porcelain
cmp stdout $WORK/golden/dirty-status.txt

# Now try to restack - dirty changes should be preserved
gs repo restack

# Verify dirty changes are still present after restack
cmp feat2.txt $WORK/extra/dirty.txt
git status --porcelain
cmp stdout $WORK/golden/dirty-status.txt

# Verify branches are properly restacked
git graph --branches
cmp stdout $WORK/golden/graph.txt

-- repo/feat1.txt --
feature 1
-- repo/feat2.txt --
feature 2
-- extra/dirty.txt --
dirty changes to feature 2
-- golden/dirty-status.txt --
 M feat2.txt
-- golden/graph.txt --
* f5121c8 (HEAD -> feat2) feat2 commit
* c1f17f5 (feat1) feat1 commit
* 8e9b73c (main) New trunk commit
* 91af7b5 Initial commit
