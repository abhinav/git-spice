# 'branch submit' should detect a PR created
# outside of the branch submit command.

as 'Test <test@example.com>'
at '2024-05-18T13:57:12Z'

# setup
cd repo
git init
git commit --allow-empty -m 'Initial commit'

# set up a fake GitHub remote
shamhub init
shamhub register alice
shamhub new origin alice/example.git
git push origin main

env SHAMHUB_USERNAME=alice
gs auth login

# create a new branch and submit it
git add feature1.txt
gs bc -m 'Add feature1' feature1
gs branch submit --fill
stderr 'Created #'

# forget all state, and re-track the branch
gs repo init --reset --trunk=main --remote=origin
gs branch track --base=main feature1

# If we now commit to the branch and then submit,
# the system should detect that a PR already exists,
# and update that instead.
cp $WORK/extra/feature1-update.txt feature1.txt
git add feature1.txt
git commit -m 'update feature1'

gs branch submit
stderr 'feature1: Found existing CR #'
stderr 'Updated #'

shamhub dump changes
cmpenvJSON stdout $WORK/golden/update.json

# We'll have a duplicate comment
# because we'll have lost information
# about the previous comment.
shamhub dump comments
cmp stdout $WORK/golden/comments.txt

-- repo/feature1.txt --
Contents of feature1

-- extra/feature1-update.txt --
New contents of feature1

-- golden/update.json --
[
  {
    "number": 1,
    "state": "open",
    "title": "Add feature1",
    "body": "",
    "html_url": "$SHAMHUB_URL/alice/example/change/1",
    "head": {
      "ref": "feature1",
      "sha": "b805a8b9545d71929cc128fc81b0d86bb2def9ed"
    },
    "base": {
      "ref": "main",
      "sha": "9df31764fb4252f719c92d53fae05a766f019a17"
    }
  }
]

-- golden/comments.txt --
- change: 1
  body: |
    This change is part of the following stack:

    - #1 ◀

    <sub>Change managed by [git-spice](https://abhinav.github.io/git-spice/).</sub>
- change: 1
  body: |
    This change is part of the following stack:

    - #1 ◀

    <sub>Change managed by [git-spice](https://abhinav.github.io/git-spice/).</sub>
