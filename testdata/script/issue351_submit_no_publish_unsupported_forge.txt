# submit commands should still be able to push to unsupported forges
# if the --no-publish flag is used.
#
# https://github.com/abhinav/git-spice/issues/351

as 'Test <test@example.com>'
at '2024-08-21T05:18:00Z'

# setup an upstream repository
mkdir upstream
cd upstream
git init
git commit --allow-empty -m 'Initial commit'

# receive updates to the current branch
git config receive.denyCurrentBranch updateInstead

# setup the git-spice managed repository
cd ..
git clone upstream repo
cd repo
gs repo init

# set up a stack: feat1 -> feat2 -> feat3
mv $WORK/extra/feat1.txt feat1.txt
git add feat1.txt
gs bc -m feat1

mv $WORK/extra/feat2.txt feat2.txt
git add feat2.txt
gs bc -m feat2

mv $WORK/extra/feat3.txt feat3.txt
git add feat3.txt
gs bc -m feat3

# branch submit: supports pushing
gs bottom
gs branch submit --no-publish

# downstack submit: supports pushing
gs up
gs downstack submit --no-publish

# upstack submit: supports pushing
gs upstack submit --no-publish

# stack submit: supports pushing
gs stack submit --no-publish

# submit: can push a new commit
gs bottom
mv $WORK/extra/feat1-new.txt feat1.txt
git add feat1.txt
gs cc -m 'feat1 new version'
gs stack submit --no-publish

# submit: can push an amended commit
gs up
mv $WORK/extra/feat2-new.txt feat2.txt
git add feat2.txt
gs ca -m 'feat2 new version'
gs stack submit --no-publish

# verify final state
cd ../upstream
git graph --branches
cmp stdout $WORK/golden/final-graph.txt

-- extra/feat1.txt --
feature 1
-- extra/feat2.txt --
feature 2
-- extra/feat3.txt --
feature 3
-- extra/feat1-new.txt --
feature 1 new version
-- extra/feat2-new.txt --
feature 2 new version
-- golden/final-graph.txt --
* 34273ae (feat3) feat3
* b7b3597 (feat2) feat2 new version
* a5db510 (feat1) feat1 new version
* 85d6296 feat1
* 019537e (HEAD -> main) Initial commit
