name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ '*' ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      name: Check out repository
    - uses: jdx/mise-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - run: mise run lint

  test:
    runs-on: ${{ matrix.os }}
    name: Test (${{ matrix.os}}, Git ${{ matrix.git-version }})

    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        git-version: ["system"]
        include:
          # On Linux, also test against specific versions built from source.
          - {os: ubuntu-latest, git-version: "2.38.0"}
          # On Windows, run without coverage.
          - {os: windows-latest, no-cover: true}

    steps:
    - uses: actions/checkout@v4
    - uses: jdx/mise-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # TODO: extract into separate action
    - name: Determine Git cache directory
      shell: bash
      if: matrix.git-version != 'system'
      run: |
        echo "GIT_VERSION=$GIT_VERSION" >> "$GITHUB_ENV"
        echo "GIT_CACHE_DIR=$HOME/.cache/git/$GIT_VERSION" >> "$GITHUB_ENV"
      env:
        GIT_VERSION: ${{ matrix.git-version }}
    - name: Fill Git cache
      if: matrix.git-version != 'system'
      uses: actions/cache@v4
      with:
        path: ${{ env.GIT_CACHE_DIR }}
        key: ${{ runner.os }}-git-${{ matrix.git-version }}
    - name: Install Git
      shell: bash
      if: matrix.git-version != 'system'
      run: >-
        go run ./tools/ci/install-git
        -debian
        -prefix "$GIT_CACHE_DIR"
        -version "$GIT_VERSION"
    - name: Report Git version
      shell: bash
      run:
        git --version

    - name: Test
      run: mise run ${{ (matrix.no-cover == true) && 'test' || 'cover' }}
      shell: bash
      env:
        GOTESTSUM_FORMAT: github-actions

    - name: Upload coverage
      uses: codecov/codecov-action@v5.4.0
      if: ${{ matrix.no-cover != true }}
      with:
        files: ./cover.out
        token: ${{ secrets.CODECOV_TOKEN }}

  # Depends on lint and test.
  # Stable name for branch protection to require
  # instead of adding lint and test there directly.
  ok:
    name: OK
    runs-on: ubuntu-latest
    needs: [lint, test]

    # Workaround for GitHub marking this job as skipped,
    # and allowing a bad PR to merge anyway.
    if: always()
    steps:
    - run: exit 1
      if: >-
        needs.lint.result != 'success' ||
        needs.test.result != 'success'

    - run: exit 0
