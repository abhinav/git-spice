// Code generated by MockGen. DO NOT EDIT.
// Source: go.abhg.dev/gs/internal/handler/autostash (interfaces: GitWorktree,Service)
//
// Generated by this command:
//
//	mockgen -package autostash -destination mocks_test.go -typed . GitWorktree,Service
//

// Package autostash is a generated GoMock package.
package autostash

import (
	context "context"
	reflect "reflect"

	git "go.abhg.dev/gs/internal/git"
	spice "go.abhg.dev/gs/internal/spice"
	gomock "go.uber.org/mock/gomock"
)

// MockGitWorktree is a mock of GitWorktree interface.
type MockGitWorktree struct {
	ctrl     *gomock.Controller
	recorder *MockGitWorktreeMockRecorder
	isgomock struct{}
}

// MockGitWorktreeMockRecorder is the mock recorder for MockGitWorktree.
type MockGitWorktreeMockRecorder struct {
	mock *MockGitWorktree
}

// NewMockGitWorktree creates a new mock instance.
func NewMockGitWorktree(ctrl *gomock.Controller) *MockGitWorktree {
	mock := &MockGitWorktree{ctrl: ctrl}
	mock.recorder = &MockGitWorktreeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitWorktree) EXPECT() *MockGitWorktreeMockRecorder {
	return m.recorder
}

// CheckoutFiles mocks base method.
func (m *MockGitWorktree) CheckoutFiles(ctx context.Context, req *git.CheckoutFilesRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutFiles", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckoutFiles indicates an expected call of CheckoutFiles.
func (mr *MockGitWorktreeMockRecorder) CheckoutFiles(ctx, req any) *MockGitWorktreeCheckoutFilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutFiles", reflect.TypeOf((*MockGitWorktree)(nil).CheckoutFiles), ctx, req)
	return &MockGitWorktreeCheckoutFilesCall{Call: call}
}

// MockGitWorktreeCheckoutFilesCall wrap *gomock.Call
type MockGitWorktreeCheckoutFilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitWorktreeCheckoutFilesCall) Return(arg0 error) *MockGitWorktreeCheckoutFilesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitWorktreeCheckoutFilesCall) Do(f func(context.Context, *git.CheckoutFilesRequest) error) *MockGitWorktreeCheckoutFilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitWorktreeCheckoutFilesCall) DoAndReturn(f func(context.Context, *git.CheckoutFilesRequest) error) *MockGitWorktreeCheckoutFilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CurrentBranch mocks base method.
func (m *MockGitWorktree) CurrentBranch(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentBranch", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentBranch indicates an expected call of CurrentBranch.
func (mr *MockGitWorktreeMockRecorder) CurrentBranch(ctx any) *MockGitWorktreeCurrentBranchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentBranch", reflect.TypeOf((*MockGitWorktree)(nil).CurrentBranch), ctx)
	return &MockGitWorktreeCurrentBranchCall{Call: call}
}

// MockGitWorktreeCurrentBranchCall wrap *gomock.Call
type MockGitWorktreeCurrentBranchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitWorktreeCurrentBranchCall) Return(arg0 string, arg1 error) *MockGitWorktreeCurrentBranchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitWorktreeCurrentBranchCall) Do(f func(context.Context) (string, error)) *MockGitWorktreeCurrentBranchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitWorktreeCurrentBranchCall) DoAndReturn(f func(context.Context) (string, error)) *MockGitWorktreeCurrentBranchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Reset mocks base method.
func (m *MockGitWorktree) Reset(ctx context.Context, commit string, opts git.ResetOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", ctx, commit, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockGitWorktreeMockRecorder) Reset(ctx, commit, opts any) *MockGitWorktreeResetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockGitWorktree)(nil).Reset), ctx, commit, opts)
	return &MockGitWorktreeResetCall{Call: call}
}

// MockGitWorktreeResetCall wrap *gomock.Call
type MockGitWorktreeResetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitWorktreeResetCall) Return(arg0 error) *MockGitWorktreeResetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitWorktreeResetCall) Do(f func(context.Context, string, git.ResetOptions) error) *MockGitWorktreeResetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitWorktreeResetCall) DoAndReturn(f func(context.Context, string, git.ResetOptions) error) *MockGitWorktreeResetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StashApply mocks base method.
func (m *MockGitWorktree) StashApply(ctx context.Context, stash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StashApply", ctx, stash)
	ret0, _ := ret[0].(error)
	return ret0
}

// StashApply indicates an expected call of StashApply.
func (mr *MockGitWorktreeMockRecorder) StashApply(ctx, stash any) *MockGitWorktreeStashApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StashApply", reflect.TypeOf((*MockGitWorktree)(nil).StashApply), ctx, stash)
	return &MockGitWorktreeStashApplyCall{Call: call}
}

// MockGitWorktreeStashApplyCall wrap *gomock.Call
type MockGitWorktreeStashApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitWorktreeStashApplyCall) Return(arg0 error) *MockGitWorktreeStashApplyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitWorktreeStashApplyCall) Do(f func(context.Context, string) error) *MockGitWorktreeStashApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitWorktreeStashApplyCall) DoAndReturn(f func(context.Context, string) error) *MockGitWorktreeStashApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StashCreate mocks base method.
func (m *MockGitWorktree) StashCreate(ctx context.Context, message string) (git.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StashCreate", ctx, message)
	ret0, _ := ret[0].(git.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StashCreate indicates an expected call of StashCreate.
func (mr *MockGitWorktreeMockRecorder) StashCreate(ctx, message any) *MockGitWorktreeStashCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StashCreate", reflect.TypeOf((*MockGitWorktree)(nil).StashCreate), ctx, message)
	return &MockGitWorktreeStashCreateCall{Call: call}
}

// MockGitWorktreeStashCreateCall wrap *gomock.Call
type MockGitWorktreeStashCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitWorktreeStashCreateCall) Return(arg0 git.Hash, arg1 error) *MockGitWorktreeStashCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitWorktreeStashCreateCall) Do(f func(context.Context, string) (git.Hash, error)) *MockGitWorktreeStashCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitWorktreeStashCreateCall) DoAndReturn(f func(context.Context, string) (git.Hash, error)) *MockGitWorktreeStashCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StashStore mocks base method.
func (m *MockGitWorktree) StashStore(ctx context.Context, stash git.Hash, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StashStore", ctx, stash, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// StashStore indicates an expected call of StashStore.
func (mr *MockGitWorktreeMockRecorder) StashStore(ctx, stash, message any) *MockGitWorktreeStashStoreCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StashStore", reflect.TypeOf((*MockGitWorktree)(nil).StashStore), ctx, stash, message)
	return &MockGitWorktreeStashStoreCall{Call: call}
}

// MockGitWorktreeStashStoreCall wrap *gomock.Call
type MockGitWorktreeStashStoreCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitWorktreeStashStoreCall) Return(arg0 error) *MockGitWorktreeStashStoreCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitWorktreeStashStoreCall) Do(f func(context.Context, git.Hash, string) error) *MockGitWorktreeStashStoreCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitWorktreeStashStoreCall) DoAndReturn(f func(context.Context, git.Hash, string) error) *MockGitWorktreeStashStoreCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// RebaseRescue mocks base method.
func (m *MockService) RebaseRescue(ctx context.Context, req spice.RebaseRescueRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebaseRescue", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// RebaseRescue indicates an expected call of RebaseRescue.
func (mr *MockServiceMockRecorder) RebaseRescue(ctx, req any) *MockServiceRebaseRescueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebaseRescue", reflect.TypeOf((*MockService)(nil).RebaseRescue), ctx, req)
	return &MockServiceRebaseRescueCall{Call: call}
}

// MockServiceRebaseRescueCall wrap *gomock.Call
type MockServiceRebaseRescueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceRebaseRescueCall) Return(arg0 error) *MockServiceRebaseRescueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceRebaseRescueCall) Do(f func(context.Context, spice.RebaseRescueRequest) error) *MockServiceRebaseRescueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceRebaseRescueCall) DoAndReturn(f func(context.Context, spice.RebaseRescueRequest) error) *MockServiceRebaseRescueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
