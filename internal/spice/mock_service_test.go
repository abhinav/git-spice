// Code generated by MockGen. DO NOT EDIT.
// Source: go.abhg.dev/gs/internal/spice (interfaces: GitRepository,Store)
//
// Generated by this command:
//
//	mockgen -destination=mock_service_test.go -package=spice . GitRepository,Store
//

// Package spice is a generated GoMock package.
package spice

import (
	context "context"
	reflect "reflect"

	git "go.abhg.dev/gs/internal/git"
	state "go.abhg.dev/gs/internal/spice/state"
	gomock "go.uber.org/mock/gomock"
)

// MockGitRepository is a mock of GitRepository interface.
type MockGitRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGitRepositoryMockRecorder
}

// MockGitRepositoryMockRecorder is the mock recorder for MockGitRepository.
type MockGitRepositoryMockRecorder struct {
	mock *MockGitRepository
}

// NewMockGitRepository creates a new mock instance.
func NewMockGitRepository(ctrl *gomock.Controller) *MockGitRepository {
	mock := &MockGitRepository{ctrl: ctrl}
	mock.recorder = &MockGitRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitRepository) EXPECT() *MockGitRepositoryMockRecorder {
	return m.recorder
}

// CurrentBranch mocks base method.
func (m *MockGitRepository) CurrentBranch(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentBranch", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentBranch indicates an expected call of CurrentBranch.
func (mr *MockGitRepositoryMockRecorder) CurrentBranch(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentBranch", reflect.TypeOf((*MockGitRepository)(nil).CurrentBranch), arg0)
}

// DeleteBranch mocks base method.
func (m *MockGitRepository) DeleteBranch(arg0 context.Context, arg1 string, arg2 git.BranchDeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBranch indicates an expected call of DeleteBranch.
func (mr *MockGitRepositoryMockRecorder) DeleteBranch(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranch", reflect.TypeOf((*MockGitRepository)(nil).DeleteBranch), arg0, arg1, arg2)
}

// ForkPoint mocks base method.
func (m *MockGitRepository) ForkPoint(arg0 context.Context, arg1, arg2 string) (git.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForkPoint", arg0, arg1, arg2)
	ret0, _ := ret[0].(git.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForkPoint indicates an expected call of ForkPoint.
func (mr *MockGitRepositoryMockRecorder) ForkPoint(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForkPoint", reflect.TypeOf((*MockGitRepository)(nil).ForkPoint), arg0, arg1, arg2)
}

// HashAt mocks base method.
func (m *MockGitRepository) HashAt(arg0 context.Context, arg1, arg2 string) (git.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashAt", arg0, arg1, arg2)
	ret0, _ := ret[0].(git.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashAt indicates an expected call of HashAt.
func (mr *MockGitRepositoryMockRecorder) HashAt(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashAt", reflect.TypeOf((*MockGitRepository)(nil).HashAt), arg0, arg1, arg2)
}

// IsAncestor mocks base method.
func (m *MockGitRepository) IsAncestor(arg0 context.Context, arg1, arg2 git.Hash) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAncestor", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAncestor indicates an expected call of IsAncestor.
func (mr *MockGitRepositoryMockRecorder) IsAncestor(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAncestor", reflect.TypeOf((*MockGitRepository)(nil).IsAncestor), arg0, arg1, arg2)
}

// ListRemotes mocks base method.
func (m *MockGitRepository) ListRemotes(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRemotes", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemotes indicates an expected call of ListRemotes.
func (mr *MockGitRepositoryMockRecorder) ListRemotes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemotes", reflect.TypeOf((*MockGitRepository)(nil).ListRemotes), arg0)
}

// LocalBranches mocks base method.
func (m *MockGitRepository) LocalBranches(arg0 context.Context) ([]git.LocalBranch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalBranches", arg0)
	ret0, _ := ret[0].([]git.LocalBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalBranches indicates an expected call of LocalBranches.
func (mr *MockGitRepositoryMockRecorder) LocalBranches(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalBranches", reflect.TypeOf((*MockGitRepository)(nil).LocalBranches), arg0)
}

// MergeBase mocks base method.
func (m *MockGitRepository) MergeBase(arg0 context.Context, arg1, arg2 string) (git.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeBase", arg0, arg1, arg2)
	ret0, _ := ret[0].(git.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeBase indicates an expected call of MergeBase.
func (mr *MockGitRepositoryMockRecorder) MergeBase(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeBase", reflect.TypeOf((*MockGitRepository)(nil).MergeBase), arg0, arg1, arg2)
}

// PeelToCommit mocks base method.
func (m *MockGitRepository) PeelToCommit(arg0 context.Context, arg1 string) (git.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeelToCommit", arg0, arg1)
	ret0, _ := ret[0].(git.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeelToCommit indicates an expected call of PeelToCommit.
func (mr *MockGitRepositoryMockRecorder) PeelToCommit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeelToCommit", reflect.TypeOf((*MockGitRepository)(nil).PeelToCommit), arg0, arg1)
}

// Rebase mocks base method.
func (m *MockGitRepository) Rebase(arg0 context.Context, arg1 git.RebaseRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rebase", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rebase indicates an expected call of Rebase.
func (mr *MockGitRepositoryMockRecorder) Rebase(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebase", reflect.TypeOf((*MockGitRepository)(nil).Rebase), arg0, arg1)
}

// RemoteDefaultBranch mocks base method.
func (m *MockGitRepository) RemoteDefaultBranch(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteDefaultBranch", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteDefaultBranch indicates an expected call of RemoteDefaultBranch.
func (mr *MockGitRepositoryMockRecorder) RemoteDefaultBranch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteDefaultBranch", reflect.TypeOf((*MockGitRepository)(nil).RemoteDefaultBranch), arg0, arg1)
}

// RemoteURL mocks base method.
func (m *MockGitRepository) RemoteURL(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteURL indicates an expected call of RemoteURL.
func (mr *MockGitRepositoryMockRecorder) RemoteURL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteURL", reflect.TypeOf((*MockGitRepository)(nil).RemoteURL), arg0, arg1)
}

// RenameBranch mocks base method.
func (m *MockGitRepository) RenameBranch(arg0 context.Context, arg1 git.RenameBranchRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameBranch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameBranch indicates an expected call of RenameBranch.
func (mr *MockGitRepositoryMockRecorder) RenameBranch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameBranch", reflect.TypeOf((*MockGitRepository)(nil).RenameBranch), arg0, arg1)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AppendContinuations mocks base method.
func (m *MockStore) AppendContinuations(arg0 context.Context, arg1 string, arg2 ...state.Continuation) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AppendContinuations", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendContinuations indicates an expected call of AppendContinuations.
func (mr *MockStoreMockRecorder) AppendContinuations(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendContinuations", reflect.TypeOf((*MockStore)(nil).AppendContinuations), varargs...)
}

// CacheTemplates mocks base method.
func (m *MockStore) CacheTemplates(arg0 context.Context, arg1 string, arg2 []*state.CachedTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheTemplates", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CacheTemplates indicates an expected call of CacheTemplates.
func (mr *MockStoreMockRecorder) CacheTemplates(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheTemplates", reflect.TypeOf((*MockStore)(nil).CacheTemplates), arg0, arg1, arg2)
}

// ListBranches mocks base method.
func (m *MockStore) ListBranches(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranches", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranches indicates an expected call of ListBranches.
func (mr *MockStoreMockRecorder) ListBranches(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranches", reflect.TypeOf((*MockStore)(nil).ListBranches), arg0)
}

// LoadCachedTemplates mocks base method.
func (m *MockStore) LoadCachedTemplates(arg0 context.Context, arg1 string) ([]*state.CachedTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCachedTemplates", arg0, arg1)
	ret0, _ := ret[0].([]*state.CachedTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCachedTemplates indicates an expected call of LoadCachedTemplates.
func (mr *MockStoreMockRecorder) LoadCachedTemplates(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCachedTemplates", reflect.TypeOf((*MockStore)(nil).LoadCachedTemplates), arg0, arg1)
}

// LookupBranch mocks base method.
func (m *MockStore) LookupBranch(arg0 context.Context, arg1 string) (*state.LookupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupBranch", arg0, arg1)
	ret0, _ := ret[0].(*state.LookupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupBranch indicates an expected call of LookupBranch.
func (mr *MockStoreMockRecorder) LookupBranch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupBranch", reflect.TypeOf((*MockStore)(nil).LookupBranch), arg0, arg1)
}

// Remote mocks base method.
func (m *MockStore) Remote() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remote")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remote indicates an expected call of Remote.
func (mr *MockStoreMockRecorder) Remote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remote", reflect.TypeOf((*MockStore)(nil).Remote))
}

// TakeContinuations mocks base method.
func (m *MockStore) TakeContinuations(arg0 context.Context, arg1 string) ([]state.Continuation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TakeContinuations", arg0, arg1)
	ret0, _ := ret[0].([]state.Continuation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TakeContinuations indicates an expected call of TakeContinuations.
func (mr *MockStoreMockRecorder) TakeContinuations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeContinuations", reflect.TypeOf((*MockStore)(nil).TakeContinuations), arg0, arg1)
}

// Trunk mocks base method.
func (m *MockStore) Trunk() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trunk")
	ret0, _ := ret[0].(string)
	return ret0
}

// Trunk indicates an expected call of Trunk.
func (mr *MockStoreMockRecorder) Trunk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trunk", reflect.TypeOf((*MockStore)(nil).Trunk))
}

// UpdateBranch mocks base method.
func (m *MockStore) UpdateBranch(arg0 context.Context, arg1 *state.UpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBranch indicates an expected call of UpdateBranch.
func (mr *MockStoreMockRecorder) UpdateBranch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranch", reflect.TypeOf((*MockStore)(nil).UpdateBranch), arg0, arg1)
}
