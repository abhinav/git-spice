[settings]
experimental = true

[env]
GOTESTSUM_FORMAT = "testname"
GOBIN = "{{ config_root }}/bin"
PROJECT_ROOT = "{{ config_root }}"
_.path = ["{{ config_root }}/bin"]

[alias]
# Specify sources for all tools so we can refer to them directly.
golangci-lint = "aqua:golangci/golangci-lint"
changie = "ubi:miniscruff/changie"

[tools]
# Self-explanatory.
go = "latest"

# Test runner with prettier output.
gotestsum = "latest"

# Stricter code formatting.
gofumpt = "latest"

# Collection of linters.
golangci-lint = "latest"

# Changelog manager.
changie = "latest"

"ubi:abhinav/requiredfield" = "0.7.1"

[tasks.generate]
depends = ["tools"]
description = "Update generated code"
run = [
  "go generate -x ./...",
  "(cd doc && mise run generate)",
]

[tasks.test]
depends = ["test:*"]

[tasks."test:default"]
wait_for = ["generate"]
description = "Run default tests"
run = "gotestsum -- ./... -race={{flag(name='race')}}"

[tasks."test:script"]
wait_for = ["generate"]
description = "Run script tests"
usage = '''
flag "-v --verbose" default="false" help="Enable verbose output"
flag "--race" default="false" help="Enable data race detection"
flag "--update" default="false" help="Update expected results"

flag "--shard-index <shard_index>" default="0" help="Shard index to run"
flag "--shard-count <shard_count>" default="1" help="Total number of shards"

flag "--run <script>" help="Regex to select which script tests to run"
complete "script" run="ls testdata/script/*.txt | cut -d/ -f3 | sed 's/.txt$//'"
'''
run = """
gotestsum
  {%- if flag(name='verbose') == 'true' %} --format=standard-verbose
  {%- endif %} -- {# -#}
  -tags=script {# enable script tests -#}
  -run TestScript/{{option(name='run')}} {# run only script tests -#}
  -race={{flag(name='race')}} {# race detection -#}
  -shard-index={{option(name='shard-index')}} {# shard index -#}
  -shard-count={{option(name='shard-count')}} {# shard count -#}
  -update={{flag(name='update')}} {# update expected results -#}
"""

[tasks."_cover_report"]
run = "go tool cover -html=cover.out -o cover.html"

[tasks."cover:default"]
wait_for = ["generate"]
depends_post = ["_cover_report"]
description = "Run default tests with coverage"
run = """
gotestsum -- {# -#}
  ./... {# run all tests -#}
  -race={{flag(name='race')}} {# race detection -#}
  -coverpkg=./... {# cover all packages -#}
  -coverprofile=cover.out {# -#}
"""

[tasks."cover:script"]
wait_for = ["generate"]
depends_post = ["_cover_report"]
description = "Run script tests with coverage"
run = """
gotestsum -- {# -#}
  -tags=script {# enable script tests -#}
  -run '^TestScript$' {# run only script tests -#}
  -race={{flag(name='race')}} {# race detection -#}
  -coverpkg=./... {# cover all packages -#}
  -coverprofile=cover.out {# -#}
  -shard-index={{option(name='shard-index', default='0')}} {# shard index -#}
  -shard-count={{option(name='shard-count', default='1')}} {# shard count -#}
"""

[tasks.tidy]
run = "go mod tidy"
description = "Update go.mod and go.sum files"

[tasks.fmt]
run = "gofumpt -w ."
description = "Format all go files"

[tasks.lint]
depends = ["lint:*"]
wait_for = ["generate"]
description = "Run all lint checks"

[tasks."lint:golangci-lint"]
run = "golangci-lint run"
description = "Run golangci-lint"

[tasks."lint:requiredfield"]
run = "go vet -vettool=$(command -v requiredfield) ./..."
description = "Check for required fields"

[tasks."lint:tidy"]
run = "go mod tidy -diff"
description = "Ensure go.mod and go.sum are up to date"

[tasks.build]
usage = """
flag "--pprof" help="Build with pofiling flags"
"""
run = """
go install -tags="
  {%- if flag(name='pprof') == 'true' -%}
    profile
  {%- endif -%}
" go.abhg.dev/gs
"""
wait_for = ["generate"]
description = "Build the gs binary"

[tasks.tools]
sources = ["go.mod"]
outputs = { auto = true }
run = "go install tool"
description = "Install tools"
hide = true

[tasks.changie]
run = "changie"
description = "Convenience alias to run changie"

[tasks."doc:serve"]
run = "cd doc && mise run serve"
description = "Serve the documentation"

[tasks."doc:build"]
run = "cd doc && mise run build"

[tasks."release:prepare"]
description = "Prepare a release for publishing"
run = "go run ./tools/ci/prepare-release -version {{arg(name='version')}}"
