#!/usr/bin/env bash
set -eu

__mise_bootstrap() {
    local script_dir project_dir
    script_dir=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
    project_dir=$( cd -- "$script_dir/../.." &> /dev/null && pwd )
    export MISE_BOOTSTRAP_PROJECT_DIR="$project_dir"
    local localized_dir="$project_dir/.mise"
    export MISE_BOOTSTRAP_PROJECT_DIR="$project_dir"
    export MISE_DATA_DIR="$localized_dir"
    export MISE_CONFIG_DIR="$localized_dir"
    export MISE_CACHE_DIR="$localized_dir/cache"
    export MISE_STATE_DIR="$localized_dir/state"
    export MISE_INSTALL_PATH="$localized_dir/mise-2025.1.6"
    export MISE_TRUSTED_CONFIG_PATHS="$project_dir${MISE_TRUSTED_CONFIG_PATHS:+:$MISE_TRUSTED_CONFIG_PATHS}"
    export MISE_IGNORED_CONFIG_PATHS="$HOME/.config/mise${MISE_IGNORED_CONFIG_PATHS:+:$MISE_IGNORED_CONFIG_PATHS}"
    export PATH="$script_dir:$PATH"
    install() {
        #!/bin/sh
        set -eu

        #region logging setup
        if [ "${MISE_DEBUG-}" = "true" ] || [ "${MISE_DEBUG-}" = "1" ]; then
        	debug() {
        		echo "$@" >&2
        	}
        else
        	debug() {
        		:
        	}
        fi

        if [ "${MISE_QUIET-}" = "1" ] || [ "${MISE_QUIET-}" = "true" ]; then
        	info() {
        		:
        	}
        else
        	info() {
        		echo "$@" >&2
        	}
        fi

        error() {
        	echo "$@" >&2
        	exit 1
        }
        #endregion

        #region environment setup
        get_os() {
        	os="$(uname -s)"
        	if [ "$os" = Darwin ]; then
        		echo "macos"
        	elif [ "$os" = Linux ]; then
        		echo "linux"
        	else
        		error "unsupported OS: $os"
        	fi
        }

        get_arch() {
        	musl=""
        	if type ldd >/dev/null 2>/dev/null; then
        		libc=$(ldd /bin/ls | grep 'musl' | head -1 | cut -d ' ' -f1)
        		if [ -n "$libc" ]; then
        			musl="-musl"
        		fi
        	fi
        	arch="$(uname -m)"
        	if [ "$arch" = x86_64 ]; then
        		echo "x64$musl"
        	elif [ "$arch" = aarch64 ] || [ "$arch" = arm64 ]; then
        		echo "arm64$musl"
        	elif [ "$arch" = armv7l ]; then
        		echo "armv7$musl"
        	else
        		error "unsupported architecture: $arch"
        	fi
        }

        get_ext() {
          if [ -n "${MISE_INSTALL_EXT:-}" ]; then
            echo "$MISE_INSTALL_EXT"
          elif [ -n "${MISE_VERSION:-}" ] && echo "$MISE_VERSION" | grep -q '^v2024'; then
            # 2024 versions don't have zstd tarballs
            echo "tar.gz"
          elif tar_supports_zstd; then
            echo "tar.zst"
          elif command -v zstd >/dev/null 2>&1; then
            echo "tar.zst"
          else
            echo "tar.gz"
          fi
        }

        tar_supports_zstd() {
          # tar is bsdtar or version is >= 1.31
          if tar --version | grep -q 'bsdtar' && command -v zstd >/dev/null 2>&1; then
            true
          elif tar --version | grep -q '1.(3[1-9]|{4-9}\d)'; then
            true
          else
            false
          fi
        }

        shasum_bin() {
        	if command -v shasum >/dev/null 2>&1; then
        		echo "shasum"
        	elif command -v sha256sum >/dev/null 2>&1; then
        		echo "sha256sum"
        	else
        		error "mise install requires shasum or sha256sum but neither is installed. Aborting."
        	fi
        }

        get_checksum() {
        	version=$1
        	os="$(get_os)"
        	arch="$(get_arch)"
        	ext="$(get_ext)"
        	url="https://github.com/jdx/mise/releases/download/v${version}/SHASUMS256.txt"

        	# For current version use static checksum otherwise
        	# use checksum from releases
        	if [ "$version" = "v2025.1.6" ]; then
        		checksum_linux_x86_64="7015ed1f40c38ae62431eb16df9d235d8b361790bc8ce1c49a6b8c943cf1cc3f  ./mise-v2025.1.6-linux-x64.tar.gz"
        		checksum_linux_x86_64_musl="0ea3622bc5d1ea679f47f0ba50a3743e67a2bb952f9e6ec442a70f4f13dff4b6  ./mise-v2025.1.6-linux-x64-musl.tar.gz"
        		checksum_linux_arm64="c4fcd074c8303e461c38b90d6264abb430d4e809a92612f065e975361257431a  ./mise-v2025.1.6-linux-arm64.tar.gz"
        		checksum_linux_arm64_musl="272273c9270cf19fc79f50fa76f4851e6189c47bf55b5c3d4977d1a3c70e75ed  ./mise-v2025.1.6-linux-arm64-musl.tar.gz"
        		checksum_linux_armv7="fee2e5fbc553991203499f090c4e971d69d542b178373cf5cb822bdbc925f470  ./mise-v2025.1.6-linux-armv7.tar.gz"
        		checksum_linux_armv7_musl="d66ad3be85a6c240ee67663e0570d409094dec0c1966e0f6a8161fa9f45e598c  ./mise-v2025.1.6-linux-armv7-musl.tar.gz"
        		checksum_macos_x86_64="b205f0e92dbd2a478e36b50b118e88d063db274987c221140b60ac77e9ab13d0  ./mise-v2025.1.6-macos-x64.tar.gz"
        		checksum_macos_arm64="9016c7905d9e295234dab9deac6ad60536b86b21f947525aee4b446457839102  ./mise-v2025.1.6-macos-arm64.tar.gz"
        		checksum_linux_x86_64_zstd="6772eabb53dcbe6bba13efc6547ad23a87963ae9317040e69475d51cf648af3e  ./mise-v2025.1.6-linux-x64.tar.zst"
        		checksum_linux_x86_64_musl_zstd="aae51dd6bee55bad3fe081e5bf58a2879fd903f4d4aec2a8a6ed816a26297383  ./mise-v2025.1.6-linux-x64-musl.tar.zst"
        		checksum_linux_arm64_zstd="cbd1287ad72c3936bcd632cd6a9e466c78c074b06b436641af680ab8ff81d936  ./mise-v2025.1.6-linux-arm64.tar.zst"
        		checksum_linux_arm64_musl_zstd="b548b7d1b94a91121e1953a5b2825eee45ad4e54a7b3004c23444a0e3edcc5d8  ./mise-v2025.1.6-linux-arm64-musl.tar.zst"
        		checksum_linux_armv7_zstd="f1eab2c9a5b0fcfe512095fc521a08d04c773985ed7739b7a8ff61194d967f93  ./mise-v2025.1.6-linux-armv7.tar.zst"
        		checksum_linux_armv7_musl_zstd="87ff892ee633cbc2f1b698dd280bf527e104d35d649ddeea3cdae24877aa5088  ./mise-v2025.1.6-linux-armv7-musl.tar.zst"
        		checksum_macos_x86_64_zstd="dbe3713e539cb21fa6482891045c55405b0327c8df39776d248fae28ddc1ab14  ./mise-v2025.1.6-macos-x64.tar.zst"
        		checksum_macos_arm64_zstd="16d890749373f5b7de2ad635feb0f4abb1eedff3af28c11db2860549df829905  ./mise-v2025.1.6-macos-arm64.tar.zst"

            # TODO: refactor this, it's a bit messy
        		if [ "$(get_ext)" = "tar.zst" ]; then
        		  if [ "$os" = "linux" ]; then
                if [ "$arch" = "x64" ]; then
                  echo "$checksum_linux_x86_64_zstd"
                elif [ "$arch" = "x64-musl" ]; then
                  echo "$checksum_linux_x86_64_musl_zstd"
                elif [ "$arch" = "arm64" ]; then
                  echo "$checksum_linux_arm64_zstd"
                elif [ "$arch" = "arm64-musl" ]; then
                  echo "$checksum_linux_arm64_musl_zstd"
                elif [ "$arch" = "armv7" ]; then
                  echo "$checksum_linux_armv7_zstd"
                elif [ "$arch" = "armv7-musl" ]; then
                  echo "$checksum_linux_armv7_musl_zstd"
                else
                  warn "no checksum for $os-$arch"
                fi
              elif [ "$os" = "macos" ]; then
                if [ "$arch" = "x64" ]; then
                  echo "$checksum_macos_x86_64_zstd"
                elif [ "$arch" = "arm64" ]; then
                  echo "$checksum_macos_arm64_zstd"
                else
                  warn "no checksum for $os-$arch"
                fi
              else
                warn "no checksum for $os-$arch"
              fi
            else
              if [ "$os" = "linux" ]; then
                if [ "$arch" = "x64" ]; then
                  echo "$checksum_linux_x86_64"
                elif [ "$arch" = "x64-musl" ]; then
                  echo "$checksum_linux_x86_64_musl"
                elif [ "$arch" = "arm64" ]; then
                  echo "$checksum_linux_arm64"
                elif [ "$arch" = "arm64-musl" ]; then
                  echo "$checksum_linux_arm64_musl"
                elif [ "$arch" = "armv7" ]; then
                  echo "$checksum_linux_armv7"
                elif [ "$arch" = "armv7-musl" ]; then
                  echo "$checksum_linux_armv7_musl"
                else
                  warn "no checksum for $os-$arch"
                fi
              elif [ "$os" = "macos" ]; then
                if [ "$arch" = "x64" ]; then
                  echo "$checksum_macos_x86_64"
                elif [ "$arch" = "arm64" ]; then
                  echo "$checksum_macos_arm64"
                else
                  warn "no checksum for $os-$arch"
                fi
              else
                warn "no checksum for $os-$arch"
              fi
        		fi
        	else
        		if command -v curl >/dev/null 2>&1; then
        			debug ">" curl -fsSL "$url"
        			checksums="$(curl --compressed -fsSL "$url")"
        		else
        			if command -v wget >/dev/null 2>&1; then
        				debug ">" wget -qO - "$url"
        				stderr=$(mktemp)
        				checksums="$(wget -qO - "$url")"
        			else
        				error "mise standalone install specific version requires curl or wget but neither is installed. Aborting."
        			fi
        		fi
        		# TODO: verify with minisign or gpg if available

        		checksum="$(echo "$checksums" | grep "$os-$arch.$ext")"
        		if ! echo "$checksum" | grep -Eq "^([0-9a-f]{32}|[0-9a-f]{64})"; then
        			warn "no checksum for mise $version and $os-$arch"
        		else
        			echo "$checksum"
        		fi
        	fi
        }

        #endregion

        download_file() {
        	url="$1"
        	filename="$(basename "$url")"
        	cache_dir="$(mktemp -d)"
        	file="$cache_dir/$filename"

        	info "mise: installing mise..."

        	if command -v curl >/dev/null 2>&1; then
        		debug ">" curl -#fLo "$file" "$url"
        		curl -#fLo "$file" "$url"
        	else
        		if command -v wget >/dev/null 2>&1; then
        			debug ">" wget -qO "$file" "$url"
        			stderr=$(mktemp)
        			wget -O "$file" "$url" >"$stderr" 2>&1 || error "wget failed: $(cat "$stderr")"
        		else
        			error "mise standalone install requires curl or wget but neither is installed. Aborting."
        		fi
        	fi

        	echo "$file"
        }

        install_mise() {
        	version="${MISE_VERSION:-v2025.1.6}"
        	version="${version#v}"
        	os="$(get_os)"
        	arch="$(get_arch)"
        	ext="$(get_ext)"
        	install_path="${MISE_INSTALL_PATH:-$HOME/.local/bin/mise}"
        	install_dir="$(dirname "$install_path")"
        	tarball_url="https://github.com/jdx/mise/releases/download/v${version}/mise-v${version}-${os}-${arch}.${ext}"

        	cache_file=$(download_file "$tarball_url")
        	debug "mise-setup: tarball=$cache_file"

        	debug "validating checksum"
        	cd "$(dirname "$cache_file")" && get_checksum "$version" | "$(shasum_bin)" -c >/dev/null

        	# extract tarball
        	mkdir -p "$install_dir"
        	rm -rf "$install_path"
        	cd "$(mktemp -d)"
        	if [ "$(get_ext)" = "tar.zst" ] && ! tar_supports_zstd; then
            zstd -d -c "$cache_file" | tar -xf -
          else
            tar -xf "$cache_file"
          fi
        	mv mise/bin/mise "$install_path"
        	info "mise: installed successfully to $install_path"
        }

        after_finish_help() {
        	case "${SHELL:-}" in
        	*/zsh)
        		info "mise: run the following to activate mise in your shell:"
        		info "echo \"eval \\\"\\\$($install_path activate zsh)\\\"\" >> \"${ZDOTDIR-$HOME}/.zshrc\""
        		info ""
        		info "mise: run \`mise doctor\` to verify this is setup correctly"
        		;;
        	*/bash)
        		info "mise: run the following to activate mise in your shell:"
        		info "echo \"eval \\\"\\\$($install_path activate bash)\\\"\" >> ~/.bashrc"
        		info ""
        		info "mise: run \`mise doctor\` to verify this is setup correctly"
        		;;
        	*/fish)
        		info "mise: run the following to activate mise in your shell:"
        		info "echo \"$install_path activate fish | source\" >> ~/.config/fish/config.fish"
        		info ""
        		info "mise: run \`mise doctor\` to verify this is setup correctly"
        		;;
        	*)
        		info "mise: run \`$install_path --help\` to get started"
        		;;
        	esac
        }

        install_mise
        if [ "${MISE_INSTALL_HELP-}" != 0 ]; then
          after_finish_help
        fi

        cd "$MISE_BOOTSTRAP_PROJECT_DIR"
    }
    local MISE_INSTALL_HELP=0
    test -f "$MISE_INSTALL_PATH" || install
}
__mise_bootstrap
exec "$MISE_INSTALL_PATH" "$@"
